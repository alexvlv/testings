# $Id$

cmake_minimum_required(VERSION 3.16)
#set(CMAKE_VERBOSE_MAKEFILE ON)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif()

execute_process(
	COMMAND basename ${CMAKE_CURRENT_SOURCE_DIR}
	ERROR_QUIET
	OUTPUT_VARIABLE PROJECT_NAME
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
message("-- Configure project:[${PROJECT_NAME}]")
add_compile_definitions(APPNAME="${PROJECT_NAME}")

project(${PROJECT_NAME} LANGUAGES CXX)
set(PROJECT_UNSTRIPPED ${PROJECT_NAME}-unstripped)
set(PROJECT_NAME_BIN lib${PROJECT_NAME}.so)

if( ${PROJECT_NAME_BIN} STREQUAL ${PROJECT_NAME})
	set(PROJECT_UNSTRIPPED_BIN ${PROJECT_UNSTRIPPED})
else()
	set(PROJECT_UNSTRIPPED_BIN lib${PROJECT_UNSTRIPPED}.so)
endif()

#set(QT_VERSION_MAJOR 6)
#set(QT_VERSION ${Qt6_VERSION})

list(APPEND QT_PACKAGES
	Core
	Gui
	Widgets
)
find_package(QT NAMES Qt6 Qt5)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS  ${QT_PACKAGES})

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

file(GLOB SOURCES *.cpp )
file(GLOB HEADERS *.h )
file(GLOB FORMS *.ui )
file(GLOB RCC *.qrc )

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)


add_library(${PROJECT_UNSTRIPPED} SHARED
	${SOURCES}
	${HEADERS}
	${FORMS}
	${RCC}
	${PROJECT_NAME}.json
)

target_compile_definitions(${PROJECT_UNSTRIPPED} PRIVATE VKBDPLUGIN_LIBRARY)

set(QT_LIBS ${QT_PACKAGES})
list(APPEND QT_LIBS
	GuiPrivate
)
list(TRANSFORM QT_LIBS PREPEND Qt${QT_VERSION_MAJOR}::)
target_link_libraries(${PROJECT_UNSTRIPPED} PRIVATE
	${QT_LIBS}
)

add_custom_command(
	TARGET ${PROJECT_UNSTRIPPED} POST_BUILD
	COMMAND +${CMAKE_BUILD_TOOL} ${PROJECT_NAME}
)

add_custom_target(strip
	DEPENDS ${PROJECT_NAME}
)

add_custom_target(${PROJECT_NAME}
	DEPENDS ${PROJECT_UNSTRIPPED}
	COMMAND ${CMAKE_STRIP} ${PROJECT_UNSTRIPPED_BIN} -o ${PROJECT_NAME_BIN}
	COMMENT "Strip ${PROJECT_NAME}"
)

if(NOT ${PROJECT_NAME_BIN} STREQUAL ${PROJECT_NAME})
set_property(
	TARGET ${PROJECT_NAME}
	APPEND
	PROPERTY ADDITIONAL_CLEAN_FILES ${PROJECT_NAME_BIN} ${PROJECT_UNSTRIPPED_BIN}
)
endif()

add_custom_target(gitupd
	COMMAND +${CMAKE_BUILD_TOOL} git
	COMMAND +${CMAKE_BUILD_TOOL} all
)

include(${CMAKE_SOURCE_DIR}/cmake/install.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/gitversion.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/clean.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/suffix.cmake)
